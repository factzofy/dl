# -*- coding: utf-8 -*-
"""DL_EXP5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eB_qZQI8NsspF5eLIvUEWgGnlA2JIic0
"""

import pandas as pd
import tensorflow
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense

# Step 1: Read the Dataset
df = pd.read_csv('/content/drive/MyDrive/sem 8/DL/Datasets/placementdataset.csv')

df.head()

df.info()

df.duplicated().sum()

df = df.drop_duplicates()

df.duplicated().sum()

df.shape

# Separate features (X) and target variable (y)
X = df[['CGPA', 'Profile_Score']]
y = df['Placed']

X.head()

y

# Step 2: Build the Neural Network Model
model = Sequential()
model.add(Dense(4, input_dim=2, activation='relu')) # Input layer with 2 neurons
model.add(Dense(4, activation='relu')) # Hidden layer with 4 neurons
model.add(Dense(1, activation='sigmoid')) # Output layer with 1 neuron

model.summary()

model.get_weights()

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Step 3: Train the Model
history = model.fit(X, y, epochs=100, batch_size=1, verbose=1)

# Evaluate the model
loss, accuracy = model.evaluate(X, y)
print(f'Loss: {loss}, Accuracy: {accuracy}')

# Plot the training loss
import matplotlib.pyplot as plt
plt.plot(history.history['loss'])
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.show()

# Plot the training accuracy
plt.plot(history.history['accuracy'])
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.show()

# Get the weights and biases of all layers
weights_biases = []
for layer in model.layers:
 weights_biases.append(layer.get_weights())

# Print the weights and biases of each layer
for i, (weights, biases) in enumerate(weights_biases):
  print(f"Layer {i + 1} Weights:")
  print(weights)
  print(f"Layer {i + 1} Biases:")
  print(biases)

#predict for new data using our model
import numpy as np
new_data = np.array([[8.1, 6.1]])
prediction = model.predict(new_data)

prediction

prediction_binary = (prediction > 0.5).astype(int)
print("Prediction:", prediction_binary)

new_data = np.array([[4.1, 7.1]])
prediction = model.predict(new_data)
prediction_binary = (prediction > 0.5).astype(int)
print("Prediction:", prediction_binary)


# -*- coding: utf-8 -*-
"""DLL_Exp02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YndE1sGO4pn1pRc7xY4Hpp04od6IzCW1

Neural Network for AND function
"""

import numpy as np
class and_NN:
  def __init__(self,iv):
    self.input_vector = np.array(iv)
    self.weight_vector = np.array([[-1.5,1,1]])
    self.output = np.array([])

  def compute(self):
    mfv= np.c_[np.ones(4),self.input_vector]
    result = mfv.dot(self.weight_vector.transpose())
    self.output= [0 if r<0 else 1 for r in result]

  def show_result(self):
      print("Input vector :\n",self.input_vector)
      print("output", self.output)

  def get_output(self):
      return self.output

n = and_NN(np.array([[0,0],[0,1],[1,0],[1,1]]))
n.compute()
n.show_result()

"""
Neural Network for OR function"""

import numpy as np
class or_NN:
  def __init__(self,iv):
    self.input_vector = np.array(iv)
    self.weight_vector = np.array([[-1.5,1,1]])
    self.output = np.array([])

  def compute(self):
      mfv = np.c_[np.ones(4),self.input_vector]
      result = mfv.dot(self.weight_vector.transpose())
      self.output = [ 0 if r>0 else 1 for r in result]

  def show_result(self):
      print("Input vector :\n",self.input_vector)
      print("output", self.output)

  def get_output(self):
      return self.output

n = or_NN(np.array([[1,1],[0,1],[1,0],[0,0]]))
n.compute()
n.show_result()

import numpy as np
class and_NN:
  def __init__(self,iv):
    self.input_vector = np.array(iv)
    self.weight_vector = np.array([[-1.5,1,1]])
    self.output = np.array([])

  def compute(self):
    mfv= np.c_[np.ones(4),self.input_vector]
    result = mfv.dot(self.weight_vector.transpose())
    self.output= [1 if r<0 else 0 for r in result]

  def show_result(self):
      print("Input vector :\n",self.input_vector)
      print("output", self.output)

  def get_output(self):
      return self.output

n = and_NN(np.array([[0,0],[0,1],[1,0],[1,1]]))
n.compute()
n.show_result()

import numpy as np
class or_NN:
  def __init__(self,iv):
    self.input_vector = np.array(iv)
    self.weight_vector = np.array([[-1.5,1,1]])
    self.output = np.array([])

  def compute(self):
      mfv = np.c_[np.ones(4),self.input_vector]
      result = mfv.dot(self.weight_vector.transpose())
      self.output = [ 1 if r>0 else 0 for r in result]

  def show_result(self):
      print("Input vector :\n",self.input_vector)
      print("output", self.output)

  def get_output(self):
      return self.output

n = or_NN(np.array([[1,1],[0,1],[1,0],[0,0]]))
n.compute()
n.show_result()
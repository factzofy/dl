# -*- coding: utf-8 -*-
"""DL_EXP6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n8tzpJ4Pzkf_tEowfAjlNMdcp4y9XAAs

## Autoencoder
An autoencoder is an unsupervised learning technique for neural networks that learns efficient data representations (encoding) by training the network to ignore signal "noise." Autoencoders can be used for image denoising, image compression, and, in some cases, even generation of image data.
"""

import numpy as np
import matplotlib.pyplot as plt
from keras import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, UpSampling2D
from keras.datasets import mnist

(x_train,_ ), (x_test, _) = mnist.load_data()

# normalize the image data
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255
# reshape in the input data for the model
x_train = x_train.reshape(len(x_train), 28, 28, 1)
x_test = x_test.reshape(len(x_test), 28, 28, 1)
x_test.shape

# Add noise to the image
noise_factor = 0.6
x_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape)
x_test_noisy = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape)
# clip the values in the range of 0-1
x_train_noisy = np.clip(x_train_noisy, 0., 1.)
x_test_noisy = np.clip(x_test_noisy, 0., 1.)
# randomly select input image
index = np.random.randint(len(x_test))
# plot the image plt.imshow(x_test [index].reshape (28,28)) plt.gray()

# randomly select input image
index = np.random.randint(len(x_test))
# plot the image plt.imshow(x_test_noisy [index].reshape(28,28))
plt.gray()

# randomly select input image
index = np.random.randint(len(x_test))
# plot the image
plt.imshow(x_test_noisy [index].reshape(28,28))
plt.gray()

plt.imshow(x_test[index].reshape (28,28))
plt.gray()

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D

# Model Creation
model = Sequential([
    # Encoder network
    Conv2D(32, 3, activation='relu', padding='same', input_shape=(28, 28, 1)),
    MaxPooling2D(2, padding='same'),
    Conv2D(16, 3, activation='relu', padding='same'),
    MaxPooling2D(2, padding='same'),
    # Decoder network
    Conv2D(16, 3, activation='relu', padding='same'),
    UpSampling2D(2),
    Conv2D(32, 3, activation='relu', padding='same'),
    UpSampling2D(2),
    # Output layer
    Conv2D(1, 3, activation='sigmoid', padding='same')
])

model.compile(optimizer='adam', loss='binary_crossentropy')
model.summary()

# Train the model
model.fit(x_train_noisy, x_train, epochs=10, batch_size=256, validation_data=(x_test_noisy, x_test))

#Visualize the Results
# predict the results from model (get denoising images)
pred= model.predict(x_test_noisy)

# randomly select input image
index = np.random.randint(len(x_test))
# plot the image
plt.imshow(x_test_noisy [index].reshape(28,28))
plt.gray()

index = np.random.randint(len(x_test))
plt.figure(figsize=(10, 4))
# display original image
ax = plt.subplot(1, 2, 1)
plt.imshow(x_test_noisy [index].reshape (28,28))
plt.gray()
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
# display denoising image ax = plt.subplot(1, 2, 2)
plt.imshow(pred[index].reshape (28,28))
plt.gray()
ax.get_xaxis().set_visible (False)
ax.get_yaxis().set_visible (False)
plt.show()

index = np.random.randint(len(x_test))
plt.figure(figsize=(10, 4))
# display original image
ax = plt.subplot(1, 2, 1)
plt.imshow(x_test_noisy [index].reshape(28,28))
plt.gray()
ax.get_xaxis().set_visible (False)
ax.get_yaxis().set_visible (False)
# display denoising image
ax = plt.subplot(1, 2, 2)
plt.imshow(pred [index].reshape (28,28))

index = np.random.randint(len(x_test))
plt.figure(figsize=(10, 4))
# display original image
ax = plt.subplot(1, 2, 1)
plt.imshow(x_test_noisy[index].reshape(28,28))
plt.gray()
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
# display denoising image
ax = plt.subplot(1, 2, 2)
plt.imshow(pred[index].reshape(28,28))
plt.gray()
ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
plt.show()